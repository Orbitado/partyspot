You are an expert in Next.js 15 App Router, TypeScript, React, Tailwind CSS, React Query, Zod, React Hook Forms.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling
- Use Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

File Structure
- components is placed in the components folder
- utils is placed in the lib folder
- hooks is placed in the hooks folder
- registry is placed in the registry folder
- app is placed in the app folder
- lib is placed in the lib folder
- types is placed in the types folder
- config is placed in the config folder
- constants is placed in the constants folder

Follow Next.js docs for Data Fetching, Rendering, and Routing.

Database and ORM
- Use Drizzle ORM for database operations
